---
AWSTemplateFormatVersion: '2010-09-09'
Description: "ECS: service that runs on an ECS cluster and uses the cluster's ALB based on ecs/cluster.yaml, a cloudonaut.io template"
Parameters:
  ParentVPCStack:
    Description: 'Stack name of parent VPC stack based on vpc/vpc-*azs.yaml template.'
    Type: String
  ParentZoneStack:
    Description: 'Optional stack name of parent zone stack based on vpc/zone-*.yaml template.'
    Type: String
  ParentLoadBalancerStack:
    Description: 'Stack name of parent LoadBalancer stack based on alb.yaml template.'
    Type: String
  ParentClientStack1:
    Description: 'Optional stack name of parent Client Security Group stack based on state/client-sg.yaml template to allow network access from the cluster to whatever uses the client security group.'
    Type: String
    Default: ''
  ParentDatabaseStack:
    Description: 'Stack name of parent RDS MySQL stack based on rds-mysql.yaml template.'
    Type: String
  SubDomainNameWithDotLoadBalancer:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ยง{SubDomainNameWithDotLoadBalancer}ยง{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
  LoadBalancerDeregistrationDelay:
    Description: 'The amount time (in seconds) to wait before changing the state of a deregistering target from draining to unused.'
    Type: Number
    Default: 60
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  AppImage:
    Description: 'The image to use for a App container, which is passed directly to the Docker daemon.'
    Type: String
  AppPort:
    Description: 'The port exposed by the app container that receives traffic from the load balancer or the proxy container (AppPort <> ProxyPort <> SidecarPort).'
    Type: Number
    Default: 80
    MinValue: 1
    MaxValue: 49150
  RailsMasiterKey:
    Description: 'rails_master_key to use for a Rails Application.'
    Type: String
  DBUsername:
    Description: 'The DataBase Username.'
    Type: AWS::SSM::Parameter::Value<String>
  DBPassword:
    Description: 'The DataBase Password.'
    Type: AWS::SSM::Parameter::Value<String>
  LogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 7
  DesiredCount:
    Description: 'The number of simultaneous tasks, that you want to run on the cluster.'
    Type: Number
    Default: 0
  SubnetsReach:
    Description: 'Should the service have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Public
    AllowedValues:
      - Public
      - Private
  HealthCheckGracePeriod:
    Description: 'The period of time, in seconds, that the Amazon ECS service scheduler ignores unhealthy Elastic Load Balancing target health checks after a task has first started.'
    Type: Number
    Default: 60
    MinValue: 0
    MaxValue: 1800
Conditions:
  HasSubnetsReachPublic: !Equals [!Ref SubnetsReach, Public]
  HasClientSecurityGroup1: !Not [ !Equals [ !Ref ParentClientStack1, '' ] ]
Resources:
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: {'Fn::ImportValue': !Sub '${ParentLoadBalancerStack}-CanonicalHostedZoneID'}
        DNSName: {'Fn::ImportValue': !Sub '${ParentLoadBalancerStack}-DNSName'}
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Sub
        - '${SubDomainNameWithDotLoadBalancer}${HostedZoneName}'
        - SubDomainNameWithDotLoadBalancer: !Ref SubDomainNameWithDotLoadBalancer
          HostedZoneName: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'}
      Type: A
  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/health_checks'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-299'
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: !Ref LoadBalancerDeregistrationDelay
      VpcId: {'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC'}
  LoadBalancerHttpsListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Sub
                - '${SubDomainNameWithDotLoadBalancer}${HostedZoneName}'
                - SubDomainNameWithDotLoadBalancer: !Ref SubDomainNameWithDotLoadBalancer
                  HostedZoneName: { 'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName' }
      ListenerArn: {'Fn::ImportValue': !Sub '${ParentLoadBalancerStack}-HttpsListener'}
      Priority: 2
  ServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName}-service'
      VpcId: { 'Fn::ImportValue': !Sub '${ParentVPCStack}-VPC' }
      SecurityGroupIngress:
        - SourceSecurityGroupId: { 'Fn::ImportValue': !Sub '${ParentLoadBalancerStack}-SecurityGroupID' }
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          IpProtocol: tcp
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogsRetentionInDays
  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ecs-tasks.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: Inline # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_execution_IAM_role.html
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !GetAtt 'LogGroup.Arn'
              - Effect: Allow
                Action:
                  - 'ssm:GetParameters'
                Resource:
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'
  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: 'cashbook-rails'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref 'TaskExecutionRole'
      Memory: 512
      Cpu: 256
      ContainerDefinitions:
        - Name: app
          Image: !Ref 'AppImage'
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          Essential: true
          Environment:
            - Name: RAILS_ENV
              Value: production
            - Name: RAILS_SERVE_STATIC_FILES
              Value: 1
            - Name: DATABASE_URL
              Value: !Sub
                - 'mysql2://${DBUser}:${DBPassword}@${DBHost}/cashbook?encoding=utf8mb4'
                - DBUser: !Ref 'DBUsername'
                  DBPassword: !Ref 'DBPassword'
                  DBHost: {'Fn::ImportValue': !Sub '${ParentDatabaseStack}-DNSName'}
          Secrets:
            - Name: RAILS_MASTER_KEY
              ValueFrom: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${RailsMasiterKey}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              'awslogs-region': !Ref 'AWS::Region'
              'awslogs-group': !Ref 'LogGroup'
              'awslogs-stream-prefix': 'app'
  Cluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
  Service:
    Type: 'AWS::ECS::Service'
    Properties:
      CapacityProviderStrategy:
        - Base: 0
          CapacityProvider: FARGATE_SPOT
          Weight: 1
      Cluster: !Ref 'Cluster'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: !If [ HasSubnetsReachPublic, ENABLED, DISABLED ]
          SecurityGroups:
            - !Ref ServiceSecurityGroup
            - !If [HasClientSecurityGroup1, {'Fn::ImportValue': !Sub '${ParentClientStack1}-ClientSecurityGroup'}, !Ref 'AWS::NoValue']
          Subnets: !Split [ ',', { 'Fn::ImportValue': !Sub '${ParentVPCStack}-Subnets${SubnetsReach}' } ]
      TaskDefinition: !Ref TaskDefinition
Outputs:
  TemplateVersion:
    Description: 'template version.'
    Value: '12.12.0'
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'
